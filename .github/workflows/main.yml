name: RN SDK Testing Pipeline 🧪

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  PACKAGE_INSTALLATION_ENV: 'github'
  NODE_VERSION: '18'
  NODE_OPTIONS: '--max_old_space_size=4096'

jobs:
  B2B-SDK-Quality-Assurance:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Set image version 🔂
        run: echo "ImageVersion=$ImageVersion" >> $GITHUB_ENV

      - name: Checkout 🛎️
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Node 📚
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install node modules 📦
        run: yarn install --frozen-lockfile

      - name: Run type check 🩺
        run: yarn types-check

      - name: Run linter 🧹
        run: yarn lint

      - name: Run unit tests ⚛️
        run: yarn test

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Build package 📦
        run: yarn build

      - name: Check build 🕵️‍♂️
        run: yarn check-build

      - name: Check for unused dependencies 🔍
        shell: bash {0}
        run: |
          dependencies=$(npx -q depcheck --skip-missing)
          echo "$dependencies"
          ! echo "$dependencies" | grep -q "Unused dependencies" && (echo "OK: no unused dependencies found") || (echo "FAIL: unused dependencies found"; exit 1)

      - name: Check for strict licenses 🪪
        shell: bash {0}
        run: |
          licenses=$(npx -q tldrlegal)
          echo "$licenses"
          declare -a strict=("Must Give Credit"  "Must Disclose Source"  "Must Include Original")
          for license in "${strict[@]}"; do echo "$licenses" | grep "$license" | grep -Eoq " 0 " && (echo "OK: $license") || (echo "FAIL: $license"; exit 1); done

      - name: Check for circular dependencies ♻️
        run: npx madge --circular --no-spinner src/
